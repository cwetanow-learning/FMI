1. Дефинира две променливи за stdin(0) и stdout (1)
  #define READ 0
  #define WRITE 1

2. Проверява входните параметри и в случай, че не са подадени всички извежда съобщение за грешка и завършва с exit code 1
  if (argc < 2)
  {
    write(2, "Invalid parameters\n", 20);
    exit(1);
  }  

3. Превръща входния параметър (N - максимален брой
паралелни задачи) от char * към int

  int maxParallel = getMaxParallel(argv[1]);

  int getMaxParallel(char *input)
  {
    int result = 0;

    int length = strlen(input);
    int counter = 1;

    for (int i = length - 1; i > -1; i--)
    {
      result += ((int)input[i] - 48) * counter;
      counter *= 10;
    }

    return result;
  }

4. Създава две променливи - едната за брояч на текущите изпълняващи се задачи, а другата за статус, за приключване работа на програмата.

  int currentExecutingTasks = 0;
  int status = 0;

5. Изпълнява се while цикъл, докато стойността на променливата isDone е 0.
  while (!isDone)
  
6. Ако броят на текущите задачи, които се изпъляват е по-малък от максималния, чете следващият ред от входа на програмата. След това създава друг процес със fork(). В проверката след това, ако pid е 0, значи това е процеса-дете и в него ще се изпълни следващата задача чрез execute(input). След това се извиква exit() за приключване работата на този процес. Ако pid != 0, то това е процеса-родител и увеличава брояча за текущите задачи. 
Ако броят задачи е колкото максималния, изчаква до приключване на коя да е от тях с wait(NULL) и намаля брояча за задачите

    if (currentExecutingTasks < maxParallel)
    {
      char *input = getInput();

      int pid = fork();

      if (pid == 0)
      {
        execute(input);
        exit(0);
      }
      else
      {
        currentExecutingTasks++;
      }
    }
    else
    {
      wait(NULL);
      currentExecutingTasks--;
    }

7. Във функцията getInput се инициализират 4 променливи. Чрез системното извикване на read, програмата чете от stdin и записва в променливата char input[1024]. Ако прочетеният символ е символ за нов ред, записва нулев символ в input и връща резултата, в противен случай записва прочетеният символ в input и увеличава брояча i. Щом приключи цикъла, то е прочетен целият вход на програмата, слага се нулев символ на края на прочетения ред, глобалната променлива isDone става със стойност 1 и се връща result, който сочи към input.

char *getInput()
{
  char c;
  char input[1024];
  int i = 0;

  char *result = input;

  while (read(READ, &c, sizeof(c)))
  {
    if (c == '\n')
    {
      input[i - 1] = '\0';
      return result;
    }

    input[i] = c;
    i++;
  }

  input[i] = '\0';
  isDone = 1;

  return result;
}

8. Използва библиотечната функция system, за да изпълни подадения ред

void execute(char *line)
{
  system(line);

  // Should be with exec(), pipe() and dup2()...
}